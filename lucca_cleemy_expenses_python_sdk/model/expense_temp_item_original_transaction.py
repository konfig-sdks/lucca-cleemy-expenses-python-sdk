# coding: utf-8

"""
    Cleemy Expenses

    Welcome on the documentation for the CleemyExpenses API. 

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: https://www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_cleemy_expenses_python_sdk import schemas  # noqa: F401


class ExpenseTempItemOriginalTransaction(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Expense amount in original currency.
    """


    class MetaOapg:
        
        class properties:
            
            
            class grossAmount(
                schemas.NumberSchema
            ):
            
            
                class MetaOapg:
                    multiple_of = 0.01
            currencyId = schemas.StrSchema
            isExpenseAbroad = schemas.BoolSchema
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
            __annotations__ = {
                "grossAmount": grossAmount,
                "currencyId": currencyId,
                "isExpenseAbroad": isExpenseAbroad,
                "currency": currency,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grossAmount"]) -> MetaOapg.properties.grossAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyId"]) -> MetaOapg.properties.currencyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isExpenseAbroad"]) -> MetaOapg.properties.isExpenseAbroad: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["grossAmount", "currencyId", "isExpenseAbroad", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grossAmount"]) -> typing.Union[MetaOapg.properties.grossAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyId"]) -> typing.Union[MetaOapg.properties.currencyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isExpenseAbroad"]) -> typing.Union[MetaOapg.properties.isExpenseAbroad, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['Currency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["grossAmount", "currencyId", "isExpenseAbroad", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        grossAmount: typing.Union[MetaOapg.properties.grossAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currencyId: typing.Union[MetaOapg.properties.currencyId, str, schemas.Unset] = schemas.unset,
        isExpenseAbroad: typing.Union[MetaOapg.properties.isExpenseAbroad, bool, schemas.Unset] = schemas.unset,
        currency: typing.Union['Currency', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExpenseTempItemOriginalTransaction':
        return super().__new__(
            cls,
            *args,
            grossAmount=grossAmount,
            currencyId=currencyId,
            isExpenseAbroad=isExpenseAbroad,
            currency=currency,
            _configuration=_configuration,
            **kwargs,
        )

from lucca_cleemy_expenses_python_sdk.model.currency import Currency
