# coding: utf-8

"""
    Cleemy Expenses

    Welcome on the documentation for the CleemyExpenses API. 

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: https://www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_cleemy_expenses_python_sdk import schemas  # noqa: F401


class ExpenseClaim(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    When a user wants to declare his expenses, he creates an `ExpenseClaim`.

An `ExpenseClaim` is created by regrouping one or more `ExpenseTempItems` and converting them into ExpenseClaimItems.

Once created, an `ExpenseClaim` has to be approved by his manager.

Multiple `ExpenseClaims` can be created through a single request.
    """


    class MetaOapg:
        required = {
            "modifiedOn",
            "declaredOn",
            "createdOn",
        }
        
        class properties:
            declaredOn = schemas.DateTimeSchema
            createdOn = schemas.DateTimeSchema
            modifiedOn = schemas.DateTimeSchema
            
            
            class id(
                schemas.IntSchema
            ):
                pass
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            paymentReceivedOn = schemas.DateTimeSchema
        
            @staticmethod
            def sourceId() -> typing.Type['SourceId']:
                return SourceId
        
            @staticmethod
            def source() -> typing.Type['Enum']:
                return Enum
        
            @staticmethod
            def paymentMethodId() -> typing.Type['PaymentMethodId']:
                return PaymentMethodId
        
            @staticmethod
            def paymentMethod() -> typing.Type['Enum']:
                return Enum
        
            @staticmethod
            def statusId() -> typing.Type['ClaimStatusId']:
                return ClaimStatusId
        
            @staticmethod
            def status() -> typing.Type['Enum']:
                return Enum
        
            @staticmethod
            def approvalStateId() -> typing.Type['ApprovalStateId']:
                return ApprovalStateId
        
            @staticmethod
            def approvalState() -> typing.Type['Enum']:
                return Enum
        
            @staticmethod
            def authorizedActions() -> typing.Type['ExpenseClaimAuthorizedActions']:
                return ExpenseClaimAuthorizedActions
            ownerId = schemas.IntSchema
        
            @staticmethod
            def owner() -> typing.Type['Owner']:
                return Owner
            authorId = schemas.IntSchema
        
            @staticmethod
            def author() -> typing.Type['EntityBase']:
                return EntityBase
            legalEntityId = schemas.IntSchema
        
            @staticmethod
            def legalEntity() -> typing.Type['EntityBase']:
                return EntityBase
            departmentId = schemas.IntSchema
        
            @staticmethod
            def department() -> typing.Type['EntityBase']:
                return EntityBase
            currencyId = schemas.StrSchema
        
            @staticmethod
            def currency() -> typing.Type['Currency']:
                return Currency
            __annotations__ = {
                "declaredOn": declaredOn,
                "createdOn": createdOn,
                "modifiedOn": modifiedOn,
                "id": id,
                "name": name,
                "paymentReceivedOn": paymentReceivedOn,
                "sourceId": sourceId,
                "source": source,
                "paymentMethodId": paymentMethodId,
                "paymentMethod": paymentMethod,
                "statusId": statusId,
                "status": status,
                "approvalStateId": approvalStateId,
                "approvalState": approvalState,
                "authorizedActions": authorizedActions,
                "ownerId": ownerId,
                "owner": owner,
                "authorId": authorId,
                "author": author,
                "legalEntityId": legalEntityId,
                "legalEntity": legalEntity,
                "departmentId": departmentId,
                "department": department,
                "currencyId": currencyId,
                "currency": currency,
            }
    
    modifiedOn: MetaOapg.properties.modifiedOn
    declaredOn: MetaOapg.properties.declaredOn
    createdOn: MetaOapg.properties.createdOn
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declaredOn"]) -> MetaOapg.properties.declaredOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdOn"]) -> MetaOapg.properties.createdOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modifiedOn"]) -> MetaOapg.properties.modifiedOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentReceivedOn"]) -> MetaOapg.properties.paymentReceivedOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceId"]) -> 'SourceId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> 'Enum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentMethodId"]) -> 'PaymentMethodId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentMethod"]) -> 'Enum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusId"]) -> 'ClaimStatusId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'Enum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalStateId"]) -> 'ApprovalStateId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approvalState"]) -> 'Enum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorizedActions"]) -> 'ExpenseClaimAuthorizedActions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> 'Owner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorId"]) -> MetaOapg.properties.authorId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["author"]) -> 'EntityBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalEntityId"]) -> MetaOapg.properties.legalEntityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalEntity"]) -> 'EntityBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentId"]) -> MetaOapg.properties.departmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["department"]) -> 'EntityBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyId"]) -> MetaOapg.properties.currencyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> 'Currency': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["declaredOn", "createdOn", "modifiedOn", "id", "name", "paymentReceivedOn", "sourceId", "source", "paymentMethodId", "paymentMethod", "statusId", "status", "approvalStateId", "approvalState", "authorizedActions", "ownerId", "owner", "authorId", "author", "legalEntityId", "legalEntity", "departmentId", "department", "currencyId", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declaredOn"]) -> MetaOapg.properties.declaredOn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdOn"]) -> MetaOapg.properties.createdOn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modifiedOn"]) -> MetaOapg.properties.modifiedOn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentReceivedOn"]) -> typing.Union[MetaOapg.properties.paymentReceivedOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceId"]) -> typing.Union['SourceId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union['Enum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentMethodId"]) -> typing.Union['PaymentMethodId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentMethod"]) -> typing.Union['Enum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusId"]) -> typing.Union['ClaimStatusId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['Enum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalStateId"]) -> typing.Union['ApprovalStateId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approvalState"]) -> typing.Union['Enum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorizedActions"]) -> typing.Union['ExpenseClaimAuthorizedActions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerId"]) -> typing.Union[MetaOapg.properties.ownerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union['Owner', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorId"]) -> typing.Union[MetaOapg.properties.authorId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["author"]) -> typing.Union['EntityBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalEntityId"]) -> typing.Union[MetaOapg.properties.legalEntityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalEntity"]) -> typing.Union['EntityBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentId"]) -> typing.Union[MetaOapg.properties.departmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["department"]) -> typing.Union['EntityBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyId"]) -> typing.Union[MetaOapg.properties.currencyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union['Currency', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["declaredOn", "createdOn", "modifiedOn", "id", "name", "paymentReceivedOn", "sourceId", "source", "paymentMethodId", "paymentMethod", "statusId", "status", "approvalStateId", "approvalState", "authorizedActions", "ownerId", "owner", "authorId", "author", "legalEntityId", "legalEntity", "departmentId", "department", "currencyId", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        modifiedOn: typing.Union[MetaOapg.properties.modifiedOn, str, datetime, ],
        declaredOn: typing.Union[MetaOapg.properties.declaredOn, str, datetime, ],
        createdOn: typing.Union[MetaOapg.properties.createdOn, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        paymentReceivedOn: typing.Union[MetaOapg.properties.paymentReceivedOn, str, datetime, schemas.Unset] = schemas.unset,
        sourceId: typing.Union['SourceId', schemas.Unset] = schemas.unset,
        source: typing.Union['Enum', schemas.Unset] = schemas.unset,
        paymentMethodId: typing.Union['PaymentMethodId', schemas.Unset] = schemas.unset,
        paymentMethod: typing.Union['Enum', schemas.Unset] = schemas.unset,
        statusId: typing.Union['ClaimStatusId', schemas.Unset] = schemas.unset,
        status: typing.Union['Enum', schemas.Unset] = schemas.unset,
        approvalStateId: typing.Union['ApprovalStateId', schemas.Unset] = schemas.unset,
        approvalState: typing.Union['Enum', schemas.Unset] = schemas.unset,
        authorizedActions: typing.Union['ExpenseClaimAuthorizedActions', schemas.Unset] = schemas.unset,
        ownerId: typing.Union[MetaOapg.properties.ownerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        owner: typing.Union['Owner', schemas.Unset] = schemas.unset,
        authorId: typing.Union[MetaOapg.properties.authorId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        author: typing.Union['EntityBase', schemas.Unset] = schemas.unset,
        legalEntityId: typing.Union[MetaOapg.properties.legalEntityId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        legalEntity: typing.Union['EntityBase', schemas.Unset] = schemas.unset,
        departmentId: typing.Union[MetaOapg.properties.departmentId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        department: typing.Union['EntityBase', schemas.Unset] = schemas.unset,
        currencyId: typing.Union[MetaOapg.properties.currencyId, str, schemas.Unset] = schemas.unset,
        currency: typing.Union['Currency', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExpenseClaim':
        return super().__new__(
            cls,
            *args,
            modifiedOn=modifiedOn,
            declaredOn=declaredOn,
            createdOn=createdOn,
            id=id,
            name=name,
            paymentReceivedOn=paymentReceivedOn,
            sourceId=sourceId,
            source=source,
            paymentMethodId=paymentMethodId,
            paymentMethod=paymentMethod,
            statusId=statusId,
            status=status,
            approvalStateId=approvalStateId,
            approvalState=approvalState,
            authorizedActions=authorizedActions,
            ownerId=ownerId,
            owner=owner,
            authorId=authorId,
            author=author,
            legalEntityId=legalEntityId,
            legalEntity=legalEntity,
            departmentId=departmentId,
            department=department,
            currencyId=currencyId,
            currency=currency,
            _configuration=_configuration,
            **kwargs,
        )

from lucca_cleemy_expenses_python_sdk.model.approval_state_id import ApprovalStateId
from lucca_cleemy_expenses_python_sdk.model.claim_status_id import ClaimStatusId
from lucca_cleemy_expenses_python_sdk.model.currency import Currency
from lucca_cleemy_expenses_python_sdk.model.entity_base import EntityBase
from lucca_cleemy_expenses_python_sdk.model.enum import Enum
from lucca_cleemy_expenses_python_sdk.model.expense_claim_authorized_actions import ExpenseClaimAuthorizedActions
from lucca_cleemy_expenses_python_sdk.model.owner import Owner
from lucca_cleemy_expenses_python_sdk.model.payment_method_id import PaymentMethodId
from lucca_cleemy_expenses_python_sdk.model.source_id import SourceId
