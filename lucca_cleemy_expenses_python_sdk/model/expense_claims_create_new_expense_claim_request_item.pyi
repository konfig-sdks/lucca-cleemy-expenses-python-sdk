# coding: utf-8

"""
    Cleemy Expenses

    Welcome on the documentation for the CleemyExpenses API. 

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: https://www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_cleemy_expenses_python_sdk import schemas  # noqa: F401


class ExpenseClaimsCreateNewExpenseClaimRequestItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "expenseTempItems",
            "title",
        }
        
        class properties:
            title = schemas.StrSchema
        
            @staticmethod
            def expenseTempItems() -> typing.Type['ExpenseClaimsCreateNewExpenseClaimRequestItemExpenseTempItems']:
                return ExpenseClaimsCreateNewExpenseClaimRequestItemExpenseTempItems
            __annotations__ = {
                "title": title,
                "expenseTempItems": expenseTempItems,
            }
    
    expenseTempItems: 'ExpenseClaimsCreateNewExpenseClaimRequestItemExpenseTempItems'
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expenseTempItems"]) -> 'ExpenseClaimsCreateNewExpenseClaimRequestItemExpenseTempItems': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "expenseTempItems", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expenseTempItems"]) -> 'ExpenseClaimsCreateNewExpenseClaimRequestItemExpenseTempItems': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "expenseTempItems", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        expenseTempItems: 'ExpenseClaimsCreateNewExpenseClaimRequestItemExpenseTempItems',
        title: typing.Union[MetaOapg.properties.title, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExpenseClaimsCreateNewExpenseClaimRequestItem':
        return super().__new__(
            cls,
            *args,
            expenseTempItems=expenseTempItems,
            title=title,
            _configuration=_configuration,
            **kwargs,
        )

from lucca_cleemy_expenses_python_sdk.model.expense_claims_create_new_expense_claim_request_item_expense_temp_items import ExpenseClaimsCreateNewExpenseClaimRequestItemExpenseTempItems
