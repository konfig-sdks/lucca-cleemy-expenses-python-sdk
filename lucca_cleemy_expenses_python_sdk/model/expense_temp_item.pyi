# coding: utf-8

"""
    Cleemy Expenses

    Welcome on the documentation for the CleemyExpenses API. 

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: https://www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_cleemy_expenses_python_sdk import schemas  # noqa: F401


class ExpenseTempItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The `ExpenseTempItem`, or "temporary expense" is an expense that has not yet been declared (within an expense report) by its owner (the user who made the expense).
    """


    class MetaOapg:
        required = {
            "expenseNatureId",
            "purchasedOn",
        }
        
        class properties:
            purchasedOn = schemas.DateTimeSchema
            
            
            class expenseNatureId(
                schemas.IntSchema
            ):
                pass
            
            
            class id(
                schemas.IntSchema
            ):
                pass
        
            @staticmethod
            def originalTransaction() -> typing.Type['ExpenseTempItemOriginalTransaction']:
                return ExpenseTempItemOriginalTransaction
        
            @staticmethod
            def processedAmounts() -> typing.Type['ExpenseTempItemProcessedAmounts']:
                return ExpenseTempItemProcessedAmounts
            
            
            class mileage(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        distance = schemas.NumberSchema
                        power = schemas.NumberSchema
                        
                        
                        class waypoints(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'waypoints':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "distance": distance,
                            "power": power,
                            "waypoints": waypoints,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["distance"]) -> MetaOapg.properties.distance: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["power"]) -> MetaOapg.properties.power: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["waypoints"]) -> MetaOapg.properties.waypoints: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["distance", "power", "waypoints", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["distance"]) -> typing.Union[MetaOapg.properties.distance, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["power"]) -> typing.Union[MetaOapg.properties.power, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["waypoints"]) -> typing.Union[MetaOapg.properties.waypoints, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["distance", "power", "waypoints", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    distance: typing.Union[MetaOapg.properties.distance, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    power: typing.Union[MetaOapg.properties.power, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                    waypoints: typing.Union[MetaOapg.properties.waypoints, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'mileage':
                    return super().__new__(
                        cls,
                        *args,
                        distance=distance,
                        power=power,
                        waypoints=waypoints,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class quantity(
                schemas.IntSchema
            ):
                pass
            
            
            class effectiveQuantity(
                schemas.IntSchema
            ):
                pass
            
            
            class attendees(
                schemas.AnyTypeSchema,
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class internal(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'internal':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class external(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                            
                                            
                                            class id(
                                                schemas.IntSchema
                                            ):
                                                pass
                                            displayName = schemas.StrSchema
                                            __annotations__ = {
                                                "id": id,
                                                "displayName": displayName,
                                            }
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "displayName", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "displayName", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            id=id,
                                            displayName=displayName,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'external':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "internal": internal,
                            "external": external,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["internal"]) -> MetaOapg.properties.internal: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["external"]) -> MetaOapg.properties.external: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["internal", "external", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["internal"]) -> typing.Union[MetaOapg.properties.internal, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["external"]) -> typing.Union[MetaOapg.properties.external, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["internal", "external", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    internal: typing.Union[MetaOapg.properties.internal, list, tuple, schemas.Unset] = schemas.unset,
                    external: typing.Union[MetaOapg.properties.external, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'attendees':
                    return super().__new__(
                        cls,
                        *args,
                        internal=internal,
                        external=external,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class axisSections(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'axisSections':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class customFields(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class additional_properties(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                code = schemas.StrSchema
                                name = schemas.StrSchema
                                __annotations__ = {
                                    "code": code,
                                    "name": name,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["code", "name", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["code", "name", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'additional_properties':
                            return super().__new__(
                                cls,
                                *args,
                                code=code,
                                name=name,
                                _configuration=_configuration,
                                **kwargs,
                            )
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, ],
                ) -> 'customFields':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            merchant = schemas.AnyTypeSchema
            comment = schemas.AnyTypeSchema
            
            
            class expenseReceipts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ExpenseReceipt']:
                        return ExpenseReceipt
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ExpenseReceipt'], typing.List['ExpenseReceipt']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'expenseReceipts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ExpenseReceipt':
                    return super().__getitem__(i)
        
            @staticmethod
            def authorizedActions() -> typing.Type['ExpenseTempItemAuthorizedActions']:
                return ExpenseTempItemAuthorizedActions
        
            @staticmethod
            def sourceId() -> typing.Type['SourceId']:
                return SourceId
        
            @staticmethod
            def source() -> typing.Type['Enum']:
                return Enum
            ownerId = schemas.IntSchema
        
            @staticmethod
            def paymentMethodId() -> typing.Type['PaymentMethodId']:
                return PaymentMethodId
        
            @staticmethod
            def paymentMethod() -> typing.Type['Enum']:
                return Enum
        
            @staticmethod
            def statusId() -> typing.Type['StatusId']:
                return StatusId
        
            @staticmethod
            def status() -> typing.Type['Enum']:
                return Enum
            __annotations__ = {
                "purchasedOn": purchasedOn,
                "expenseNatureId": expenseNatureId,
                "id": id,
                "originalTransaction": originalTransaction,
                "processedAmounts": processedAmounts,
                "mileage": mileage,
                "quantity": quantity,
                "effectiveQuantity": effectiveQuantity,
                "attendees": attendees,
                "axisSections": axisSections,
                "customFields": customFields,
                "merchant": merchant,
                "comment": comment,
                "expenseReceipts": expenseReceipts,
                "authorizedActions": authorizedActions,
                "sourceId": sourceId,
                "source": source,
                "ownerId": ownerId,
                "paymentMethodId": paymentMethodId,
                "paymentMethod": paymentMethod,
                "statusId": statusId,
                "status": status,
            }
    
    expenseNatureId: MetaOapg.properties.expenseNatureId
    purchasedOn: MetaOapg.properties.purchasedOn
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchasedOn"]) -> MetaOapg.properties.purchasedOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expenseNatureId"]) -> MetaOapg.properties.expenseNatureId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originalTransaction"]) -> 'ExpenseTempItemOriginalTransaction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processedAmounts"]) -> 'ExpenseTempItemProcessedAmounts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mileage"]) -> MetaOapg.properties.mileage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveQuantity"]) -> MetaOapg.properties.effectiveQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendees"]) -> MetaOapg.properties.attendees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["axisSections"]) -> MetaOapg.properties.axisSections: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFields"]) -> MetaOapg.properties.customFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant"]) -> MetaOapg.properties.merchant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comment"]) -> MetaOapg.properties.comment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expenseReceipts"]) -> MetaOapg.properties.expenseReceipts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorizedActions"]) -> 'ExpenseTempItemAuthorizedActions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceId"]) -> 'SourceId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> 'Enum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerId"]) -> MetaOapg.properties.ownerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentMethodId"]) -> 'PaymentMethodId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentMethod"]) -> 'Enum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusId"]) -> 'StatusId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'Enum': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["purchasedOn", "expenseNatureId", "id", "originalTransaction", "processedAmounts", "mileage", "quantity", "effectiveQuantity", "attendees", "axisSections", "customFields", "merchant", "comment", "expenseReceipts", "authorizedActions", "sourceId", "source", "ownerId", "paymentMethodId", "paymentMethod", "statusId", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchasedOn"]) -> MetaOapg.properties.purchasedOn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expenseNatureId"]) -> MetaOapg.properties.expenseNatureId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originalTransaction"]) -> typing.Union['ExpenseTempItemOriginalTransaction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processedAmounts"]) -> typing.Union['ExpenseTempItemProcessedAmounts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mileage"]) -> typing.Union[MetaOapg.properties.mileage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveQuantity"]) -> typing.Union[MetaOapg.properties.effectiveQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendees"]) -> typing.Union[MetaOapg.properties.attendees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["axisSections"]) -> typing.Union[MetaOapg.properties.axisSections, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFields"]) -> typing.Union[MetaOapg.properties.customFields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant"]) -> typing.Union[MetaOapg.properties.merchant, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> typing.Union[MetaOapg.properties.comment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expenseReceipts"]) -> typing.Union[MetaOapg.properties.expenseReceipts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorizedActions"]) -> typing.Union['ExpenseTempItemAuthorizedActions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceId"]) -> typing.Union['SourceId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union['Enum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerId"]) -> typing.Union[MetaOapg.properties.ownerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentMethodId"]) -> typing.Union['PaymentMethodId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentMethod"]) -> typing.Union['Enum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusId"]) -> typing.Union['StatusId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['Enum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["purchasedOn", "expenseNatureId", "id", "originalTransaction", "processedAmounts", "mileage", "quantity", "effectiveQuantity", "attendees", "axisSections", "customFields", "merchant", "comment", "expenseReceipts", "authorizedActions", "sourceId", "source", "ownerId", "paymentMethodId", "paymentMethod", "statusId", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        expenseNatureId: typing.Union[MetaOapg.properties.expenseNatureId, decimal.Decimal, int, ],
        purchasedOn: typing.Union[MetaOapg.properties.purchasedOn, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        originalTransaction: typing.Union['ExpenseTempItemOriginalTransaction', schemas.Unset] = schemas.unset,
        processedAmounts: typing.Union['ExpenseTempItemProcessedAmounts', schemas.Unset] = schemas.unset,
        mileage: typing.Union[MetaOapg.properties.mileage, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        effectiveQuantity: typing.Union[MetaOapg.properties.effectiveQuantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attendees: typing.Union[MetaOapg.properties.attendees, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        axisSections: typing.Union[MetaOapg.properties.axisSections, list, tuple, schemas.Unset] = schemas.unset,
        customFields: typing.Union[MetaOapg.properties.customFields, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        merchant: typing.Union[MetaOapg.properties.merchant, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        comment: typing.Union[MetaOapg.properties.comment, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        expenseReceipts: typing.Union[MetaOapg.properties.expenseReceipts, list, tuple, schemas.Unset] = schemas.unset,
        authorizedActions: typing.Union['ExpenseTempItemAuthorizedActions', schemas.Unset] = schemas.unset,
        sourceId: typing.Union['SourceId', schemas.Unset] = schemas.unset,
        source: typing.Union['Enum', schemas.Unset] = schemas.unset,
        ownerId: typing.Union[MetaOapg.properties.ownerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        paymentMethodId: typing.Union['PaymentMethodId', schemas.Unset] = schemas.unset,
        paymentMethod: typing.Union['Enum', schemas.Unset] = schemas.unset,
        statusId: typing.Union['StatusId', schemas.Unset] = schemas.unset,
        status: typing.Union['Enum', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExpenseTempItem':
        return super().__new__(
            cls,
            *args,
            expenseNatureId=expenseNatureId,
            purchasedOn=purchasedOn,
            id=id,
            originalTransaction=originalTransaction,
            processedAmounts=processedAmounts,
            mileage=mileage,
            quantity=quantity,
            effectiveQuantity=effectiveQuantity,
            attendees=attendees,
            axisSections=axisSections,
            customFields=customFields,
            merchant=merchant,
            comment=comment,
            expenseReceipts=expenseReceipts,
            authorizedActions=authorizedActions,
            sourceId=sourceId,
            source=source,
            ownerId=ownerId,
            paymentMethodId=paymentMethodId,
            paymentMethod=paymentMethod,
            statusId=statusId,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from lucca_cleemy_expenses_python_sdk.model.enum import Enum
from lucca_cleemy_expenses_python_sdk.model.expense_receipt import ExpenseReceipt
from lucca_cleemy_expenses_python_sdk.model.expense_temp_item_authorized_actions import ExpenseTempItemAuthorizedActions
from lucca_cleemy_expenses_python_sdk.model.expense_temp_item_original_transaction import ExpenseTempItemOriginalTransaction
from lucca_cleemy_expenses_python_sdk.model.expense_temp_item_processed_amounts import ExpenseTempItemProcessedAmounts
from lucca_cleemy_expenses_python_sdk.model.payment_method_id import PaymentMethodId
from lucca_cleemy_expenses_python_sdk.model.source_id import SourceId
from lucca_cleemy_expenses_python_sdk.model.status_id import StatusId
