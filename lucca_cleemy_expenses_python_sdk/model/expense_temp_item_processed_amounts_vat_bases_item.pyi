# coding: utf-8

"""
    Cleemy Expenses

    Welcome on the documentation for the CleemyExpenses API. 

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: https://www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_cleemy_expenses_python_sdk import schemas  # noqa: F401


class ExpenseTempItemProcessedAmountsVatBasesItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class countryVatRateId(
                schemas.IntSchema
            ):
                pass
        
            @staticmethod
            def countryVatRate() -> typing.Type['ExpenseTempItemProcessedAmountsVatBasesItemCountryVatRate']:
                return ExpenseTempItemProcessedAmountsVatBasesItemCountryVatRate
            
            
            class vatAmount(
                schemas.NumberSchema
            ):
                pass
            
            
            class amountExcludingVat(
                schemas.NumberSchema
            ):
                pass
            __annotations__ = {
                "countryVatRateId": countryVatRateId,
                "countryVatRate": countryVatRate,
                "vatAmount": vatAmount,
                "amountExcludingVat": amountExcludingVat,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryVatRateId"]) -> MetaOapg.properties.countryVatRateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryVatRate"]) -> 'ExpenseTempItemProcessedAmountsVatBasesItemCountryVatRate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vatAmount"]) -> MetaOapg.properties.vatAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountExcludingVat"]) -> MetaOapg.properties.amountExcludingVat: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["countryVatRateId", "countryVatRate", "vatAmount", "amountExcludingVat", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryVatRateId"]) -> typing.Union[MetaOapg.properties.countryVatRateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryVatRate"]) -> typing.Union['ExpenseTempItemProcessedAmountsVatBasesItemCountryVatRate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vatAmount"]) -> typing.Union[MetaOapg.properties.vatAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountExcludingVat"]) -> typing.Union[MetaOapg.properties.amountExcludingVat, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["countryVatRateId", "countryVatRate", "vatAmount", "amountExcludingVat", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        countryVatRateId: typing.Union[MetaOapg.properties.countryVatRateId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        countryVatRate: typing.Union['ExpenseTempItemProcessedAmountsVatBasesItemCountryVatRate', schemas.Unset] = schemas.unset,
        vatAmount: typing.Union[MetaOapg.properties.vatAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amountExcludingVat: typing.Union[MetaOapg.properties.amountExcludingVat, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ExpenseTempItemProcessedAmountsVatBasesItem':
        return super().__new__(
            cls,
            *args,
            countryVatRateId=countryVatRateId,
            countryVatRate=countryVatRate,
            vatAmount=vatAmount,
            amountExcludingVat=amountExcludingVat,
            _configuration=_configuration,
            **kwargs,
        )

from lucca_cleemy_expenses_python_sdk.model.expense_temp_item_processed_amounts_vat_bases_item_country_vat_rate import ExpenseTempItemProcessedAmountsVatBasesItemCountryVatRate
